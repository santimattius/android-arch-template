plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'jacoco'
}

jacoco {
    toolVersion = '0.8.5'
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class',
                      '**/R$*.class',
                      '**/BuildConfig.*',
                      '**/Manifest*.*',
                      '**/*Test*.*',
                      'android/**/*.*'
    ]
    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories.setFrom(files([mainSrc]))
    classDirectories.setFrom(files([debugTree]))
    executionData.setFrom(fileTree(dir: "$buildDir", includes: [
            "jacoco/testDebugUnitTest.exec",
            "outputs/code-coverage/connected/*coverage.ec"
    ]))
}

android {
    compileSdkVersion 31
    buildToolsVersion "30.0.3"

    defaultConfig {
        applicationId "com.santimattius.template"
        minSdkVersion 21
        targetSdkVersion 31
        versionCode 1
        versionName "1.0"
        multiDexEnabled true

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            testCoverageEnabled false
        }
        debug {
            testCoverageEnabled true
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    viewBinding {
        enabled = true
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
        }
        unitTests.returnDefaultValues = true
    }

    tasks.withType(Test) {
        jacoco.includeNoLocationClasses = true
        jacoco.excludes = ['jdk.internal.*']
    }

    packagingOptions {
        resources.excludes.add("**/attach_hotspot_windows.dll")
        resources.excludes.add("META-INF/*")
    }

}


dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    // Android KTX
    implementation "androidx.core:core-ktx:$core_version"
    // Support libraries
    implementation "androidx.appcompat:appcompat:$appcompat_version"
    implementation "androidx.fragment:fragment-ktx:$fragment_version"
    implementation "androidx.constraintlayout:constraintlayout:$constraint_layout_version"
    implementation "androidx.recyclerview:recyclerview:$recycler_view_version"
    implementation "com.google.android.material:material:$material_version"

    // Coroutines for getting off the UI thread
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlin_coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$kotlin_coroutines_version"

    // Retrofit for networking
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"
    implementation "com.jakewharton.retrofit:retrofit2-kotlin-coroutines-adapter:$retrofit_coroutines_adapter_version"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttp_interceptor_version"

    // Gson for parsing the JSON format
    implementation "com.google.code.gson:gson:$gson_version"

    // Joda time library for dealing with time
    implementation "joda-time:joda-time:$joda_version"

    // ViewModel and LiveData (arch components)
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_extensions_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$viewmodel_ktx_version"

    // Logging
    implementation "com.jakewharton.timber:timber:$timber_version"

    // Glide for images
    implementation "com.github.bumptech.glide:glide:$glide_version"

    // Room database
    implementation "androidx.room:room-runtime:$room_version"
    implementation "androidx.legacy:legacy-support-v4:$legacy_support_version"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$livedata_ktx"
    kapt "androidx.room:room-compiler:$room_version"

    implementation "androidx.multidex:multidex:$multidex_version"

    // Koin core features
    implementation "io.insert-koin:koin-core:$koin_version"
    // Koin main features for Android (Scope,ViewModel ...)
    implementation "io.insert-koin:koin-android:$koin_version"
    // The following Espresso dependency can be either "implementation"
    // or "androidTestImplementation", depending on whether you want the
    // dependency to appear on your APK's compile classpath or the test APK
    // classpath.
    implementation "androidx.test.espresso.idling:idling-concurrent:$espresso_version"

    // Unit Tests
    testImplementation "io.insert-koin:koin-test:$koin_version"
    testImplementation "junit:junit:$junit_version"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutine_testing_version"
    testImplementation "io.mockk:mockk:$mockk_version"
    testImplementation "androidx.arch.core:core-testing:$core_testing_version"

    // Android Tests
    androidTestImplementation("androidx.test:core:$test_core_version") {
        force true
    }
    androidTestImplementation "io.mockk:mockk-android:$mockk_version"
    androidTestImplementation("org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutine_testing_version") {
        exclude group: "org.jetbrains.kotlinx", module: "kotlinx-coroutines-debug"
    }
    androidTestImplementation "io.insert-koin:koin-test:$koin_version"
    // AndroidJUnitRunner and JUnit Rules
    androidTestImplementation "androidx.test:runner:$runner_version"
    androidTestImplementation "androidx.test:rules:$rule_version"
    // Assertions
    androidTestImplementation "androidx.test.ext:junit:$junit_ext_version"
    // Espresso dependencies
    androidTestImplementation "androidx.test.espresso:espresso-core:$espresso_version"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:$espresso_version"
    androidTestImplementation "androidx.test.espresso:espresso-intents:$espresso_version"
    androidTestImplementation "androidx.test.espresso.idling:idling-concurrent:$espresso_version"
    // The following Espresso dependency can be either "implementation"
    // or "androidTestImplementation", depending on whether you want the
    // dependency to appear on your APK's compile classpath or the test APK
    // classpath.
    androidTestImplementation "androidx.test.espresso:espresso-idling-resource:$espresso_version"

    debugImplementation("androidx.fragment:fragment-testing:$fragment_version") {
        exclude group: "androidx.test", module: "core"
    }

    //UI Automator
    androidTestImplementation 'androidx.test.uiautomator:uiautomator:2.2.0'
}